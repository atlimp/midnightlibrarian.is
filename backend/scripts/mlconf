#!/usr/bin/env python3

import json
from jsonpath_ng import jsonpath, parse
import sys, getopt

def print_help():
    print('mlconf -c <config_file_path> -k <key> -v <value> ... -k <key> -v <value>')
    

def open_config(config_file_path):
    with open(config_file_path) as f:
        return json.load(f)

def write_config(config_file_path, config):
    with open(config_file_path, 'w') as outFile:
        json.dump(config, outFile, indent=4)

def main(argv):
    config_file_path = ''
    updates = []
    dry_run = False

    current_key = ''
    current_val = ''
    try:

        try:
            opts, args = getopt.getopt(argv,'hc:k:v:n',['config=', 'key=', 'value=', 'dry-run'])
        except getopt.GetoptError:
            print_help()
            sys.exit(2)

        for opt, arg in opts:

            if opt == '-h':
                print_help()
                sys.exit()
            elif opt in ('-c', '--config'):
                config_file_path = arg
            elif opt in ('-k', '--key'):
                if (current_key != ''):
                    raise Exception(f'Key { current_key } must follow corresponding value')
                current_key = arg
            elif opt in ('-v', '--value'):
                if (current_key == ''):
                    raise Exception(f'Missing key for value { arg }')
                current_val = arg
                updates.append((current_key, current_val))

                current_key = ''
                current_val = ''
            elif opt in ('-n', '--dry-run'):
                dry_run = True
    
        if (config_file_path == ''):
            raise Exception('Missing required option -c')

        config = open_config(config_file_path)
        
        for key, val in updates:
            jsonPath = parse(key)
            
            if (val.lower() == 'true'):
                val = True
            elif (val.lower() == 'false'):
                val = False
                
            config = jsonPath.update(config, val)

        print(json.dumps(config, indent = 4))
        if (not dry_run):
            write_config(config_file_path, config)        
    except Exception as error:
        print_help()
        print(error)
        sys.exit(2)

if __name__ == '__main__':
    main(sys.argv[1:])